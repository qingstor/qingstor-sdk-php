{{define "SubServiceInitParams"}}
    {{- $customizedType := . -}}
    {{- $firstPropertyID := $customizedType | firstPropertyIDInCustomizedType -}}
    {{- range $_, $property := $customizedType.Properties -}}
        {{- if ne $property.ID $firstPropertyID -}},{{- end -}}
        {{- if ne $property.ID "zone" -}}
        ${{$property.ID | snakeCase}}
        {{- else -}}
        $zone = ''
        {{- end -}}
    {{- end -}}
{{end}}

{{- define "RenderInputValidation"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{- $request := $operation.Request}}
    {{- $customizedTypes := index . 2}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}
    public function {{$opID | camelCase | lowerFirst}}Validate($operation)
    {
    {{- $i := passThrough "operation['Params']" $operation $request.Params $customizedTypes}}
    {{- template "RenderCustomizedTypeValidation" $i}}
    {{- $i := passThrough "operation['Headers']" $operation $request.Headers $customizedTypes}}
    {{- template "RenderCustomizedTypeValidation" $i}}
    {{- $i := passThrough "operation['Elements']" $operation $request.Elements $customizedTypes}}
    {{- template "RenderCustomizedTypeValidation" $i}}
    }
{{- end}}

{{- define "RenderCustomizedTypeValidation"}}
    {{- $prefix := index . 0}}
    {{- $operation := index . 1}}
    {{- $customizedType := index . 2}}
    {{- $customizedTypes := index . 3}}

    {{- range $_, $property := $customizedType.Properties}}
      {{if or (ne $operation.ID "DeleteMultipleObjects") (ne $property.ID "Content-MD5") -}}
          {{- if eq $property.Type "object"}}
          if(!isset(${{$prefix}}['{{$property.ID}}'])
              ||(${{$prefix}}['{{$property.ID}}'] ===''
                  || ${{$prefix}}['{{$property.ID}}'] === array()
                  || ${{$prefix}}['{{$property.ID}}'] === null
                 )
          ){
          {{- $nextPrefix := printf "%s[\"%s\"]" $prefix $property.ID}}
          {{- $nextCustomizedType := index $customizedTypes $property.ExtraType}}
          {{- $x := passThrough $nextPrefix $operation $nextCustomizedType $customizedTypes}}
          {{- template "RenderCustomizedTypeValidation" $x}}
          }
          {{- if $property.IsRequired }}
          if(!isset(${{$prefix}}['{{$property.ID}}'])) {
              throw new Exception\ParameterRequiredException('{{$property.ID}}', '{{$customizedType.ID}}');
          }
      {{- end}}
      {{- else if eq $property.Type "array"}}
          {{- if $property.IsRequired}}
          if (!isset(${{$prefix}}['{{$property.ID}}'])
              || (${{$prefix}}['{{$property.ID}}'] ===''
                  || ${{$prefix}}['{{$property.ID}}'] === array()
                  || ${{$prefix}}['{{$property.ID}}'] === null
                  )
          ) {
              throw new Exception\ParameterRequiredException('{{$property.ID}}', '{{$customizedType.ID}}');
          }
      {{- end}}
      {{- $isNotString := ne $property.ExtraType "string"}}
      {{- $isNotInteger := ne $property.ExtraType "integer"}}
      {{- $isNotTimestamp := ne $property.ExtraType "timestamp"}}
      {{- if and $isNotString $isNotInteger $isNotTimestamp}}
          foreach(${{$prefix}}['{{$property.ID}}'] as $key) {
              {{- $nextCustomizedType := index $customizedTypes $property.ExtraType}}
              {{- $key := passThrough "key" $operation $nextCustomizedType $customizedTypes}}
              {{- template "RenderCustomizedTypeValidation" $key}}
          }
      {{- end}}
      {{- else}}
      {{- $isContentLength := eq $property.ID "Content-Length"}}
      {{- if not $isContentLength}}
      {{- if $property.IsRequired}}
      if(!isset(${{$prefix}}['{{$property.ID}}'])
          ||(${{$prefix}}['{{$property.ID}}'] ===''
          || ${{$prefix}}['{{$property.ID}}'] === array()
          || ${{$prefix}}['{{$property.ID}}'] === null
      )){
          throw new Exception\ParameterRequiredException('{{$property.ID}}', '{{$customizedType.ID}}');
      }
      {{- end}}
      {{- if gt ($property.Enum | len) 0}}
      if(!isset(${{$prefix}}['{{$property.ID}}'])
          || (${{$prefix}}['{{$property.ID}}'] ===''
              || ${{$prefix}}['{{$property.ID}}'] === array()
              || ${{$prefix}}['{{$property.ID}}'] === null
              )
          ){
          ${{$property.ID | snakeCase}}_valid_values = array({{$property.Enum | commaConnectedWithQuote}});
          if(in_array(${{$prefix}}['{{$property.ID}}'], ${{$property.ID | snakeCase}}_valid_values)){
              throw new Exception\ParameterValueNotAllowedException(
                  '{{$property.ID}}',
                  ${{$prefix}}['{{$property.ID}}'],
                  ${{$property.ID | snakeCase}}_valid_values
              );
          }
      }
      {{- end}}
      {{- end}}
      {{- end}}
      {{- end}}
    {{- end}}
{{- end}}

{{define "BuildRequest"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
     * {{$opID | camelCase | lowerFirst}}Request: Build {{$opID}}'s request
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     *
     * @return Signer
     */
    public function {{$opID | camelCase | lowerFirst}}Request(
        {{- if eq $belongs "Object"}}$object_key{{end -}}
        {{- if and (eq $belongs "Object") $hasInput}},{{end -}}
        {{- if $hasInput}}$options=array(){{end -}})
    {
        $operation = array(
            'API' => '{{$operation.ID}}',
            'Method' => '{{$operation.Request.Method}}',
            'Uri' => '{{$operation.Request.URI}}',
            'Headers' => array(
                'Host' => $this->properties['zone'] . '.' . $this->config->host,
                {{- range $id, $property := $operation.Request.Headers.Properties}}
                '{{$property.Name}}' => isset($options['{{$property.ID}}'])?$options['{{$property.ID}}']:null,
                {{- end}}
            ),
            'Params' => array(
                {{- range $id, $property := $operation.Request.Params.Properties}}
                '{{$property.Name}}'=> isset($options['{{$property.Name}}'])?$options['{{$property.Name}}']:null,
                {{- end}}
            ),
            'Elements' => array(
                {{- range $id, $property := $operation.Request.Elements.Properties}}
                '{{$property.Name}}' => isset($options['{{$property.ID | snakeCase}}'])?$options['{{$property.ID | snakeCase}}']:null,
                {{- end}}
            ),
            'Properties' => $this->properties,
            'Body' => {{if eq $operation.Request.Body.Type "binary"}}isset($options['body'])?$options['body']:''{{else}}null{{end}}
        );
        {{- if eq $belongs "Object"}}
        $operation['Properties']['object-key'] = $object_key;
        {{- end}}
        $this->{{$opID | camelCase | lowerFirst}}Validate($operation);
        $builder = new Builder($this->config, $operation);
        $request = $builder->parse();
        $signer = new Signer(
            $request,
            $this->config->access_key_id,
            $this->config->secret_access_key
        );
        return $signer;
    }
{{- end}}

{{define "BuildNormalOperation"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
     * {{$opID | camelCase | lowerFirst}}: {{$operation.Description}}
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- if eq $belongs "Object"}}
     * @params string $object_key
     {{- end }}
     * @return Unpacker
     * @throws \Exception
     */
    public function {{$opID | camelCase | lowerFirst}}(
        {{- if eq $belongs "Object"}}$object_key{{end -}}
        {{- if and (eq $belongs "Object") $hasInput}},{{end -}}
        {{- if $hasInput}}$options=array(){{end -}})
    {
        $signer = $this->{{$opID | camelCase | lowerFirst}}Request(
{{- if eq $belongs "Object"}}$object_key{{end -}}
{{- if and (eq $belongs "Object") $hasInput}},{{end -}}
{{- if $hasInput}}$options{{end -}});
        $retries = $this->config->connection_retries;
        while(1){
            try {
                $GLOBALS['logger']->info('Sending QingStor request: {{$opID | camelCase | lowerFirst}}');
                $response = new Unpacker($this->config->client->send(
                    $signer->sign()
                ));
            } catch (\Exception $e) {
                $GLOBALS['logger']->error($e->getMessage());
                if ($retries > 0) {
                    $retries -= 1;
                } else {
                    throw new \Exception('Network Error');
                }
            }
            break;
        }
        return $response;
    }
{{- end}}

{{define "BuildQueryOperation"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
     * {{$opID | camelCase | lowerFirst}}Query: {{$opID | camelCase | lowerFirst}}'s Query Sign Way
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param {{$property.Type}} '{{$property.ID}}' {{$property.Description}}
     {{- end}}
     *
     * @return Signer
     */
    public function {{$opID | camelCase | lowerFirst}}Query(
{{- if eq $belongs "Object"}}$object_key,{{end -}}
$expires
{{- if $hasInput}},$options=array(){{end -}})
    {
        $signer = $this->{{$opID | camelCase | lowerFirst}}Request(
{{- if eq $belongs "Object"}}$object_key{{end -}}
{{- if and (eq $belongs "Object") $hasInput}},{{end -}}
{{- if $hasInput}}$options{{end -}});
        return $signer->query_sign($expires);
    }
{{- end}}

{{define "RenderOperation"}}
{{- $belongs := index . 0}}
{{- $operation := index . 1}}
{{- $customizedTypes := index . 2}}
{{- template "BuildRequest" passThrough $belongs $operation}}
{{- template "BuildNormalOperation" passThrough $belongs $operation}}
{{- template "BuildQueryOperation" passThrough $belongs $operation}}
{{- template "RenderInputValidation" passThrough $belongs $operation $customizedTypes}}
{{end}}
